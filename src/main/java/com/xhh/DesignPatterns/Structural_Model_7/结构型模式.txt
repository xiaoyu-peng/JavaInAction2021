结构型模式主要总结了一些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。

结构型模式包括：代理模式、桥接模式、装饰器模式、适配器模式、门面模式、组合模式、享元模式。

1.代理模式：它在不改变原始类（或者叫被代理类）代码的情况下，通过引入代理类来给原始类附加功能。
          代理模式在平时的开发经常被用到，常用在业务系统中开发一些非功能性需求，比如：监控、统计、鉴权、限流、事务、幂等、日志。

          TODO 代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。


2.桥接模式：【不管是哪种理解方式，它们的代码结构都是相同的，都是一种类之间的组合关系。】
        1）“将抽象和实现解耦，让它们能独立开发”。这种理解方式比较特别，应用场景也不多。
        2）类似“组合优于继承”设计原则，这种理解方式更加通用，应用场景比较多。
        TODO 桥接模式的目的是将接口部分和实现部分分离，从而让它们可以较为容易、也相对独立地加以改变。

3.装饰者模式：
        1) 装饰器模式主要解决继承关系过于复杂的问题，通过组合来替代继承。它主要的作用是给原始类添加增强功能。这也是判断是否该用装饰器模式的一个重要的依据。
        2) 除此之外，装饰器模式还有一个特点，那就是可以对原始类嵌套使用多个装饰器。
        3）为了满足这个应用场景，在设计的时候，装饰器类需要跟原始类继承相同的抽象类或者接口。
        TODO 装饰者模式在不改变原始类接口的情况下，对原始类功能进行增强，并且支持多个装饰器的嵌套使用。

4.适配器模式
        TODO 适配器模式是一种事后的补救策略。适配器提供跟原始类不同的接口，而代理模式、装饰器模式提供的都是跟原始类相同的接口。
             适配器是做接口转换，解决的是原接口和目标接口不匹配的问题。

5.门面模式
        TODO
             门面模式做接口整合，解决的是多接口调用带来的问题。
             适配器模式注重的是兼容性，而门面模式注重的是易用性。

6.组合模式

7.享元模式


TODO 享元模式 VS 单例、缓存、对象池

    1) 应用单例模式是为了保证对象全局唯一。应用享元模式是为了实现对象复用，节省内存。
    2) 缓存是为了提高访问效率，而非复用。
    3) 池化技术中的“复用”理解为“重复使用”，主要是为了节省时间。
