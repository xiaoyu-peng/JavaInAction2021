
单例模式（Singleton Pattern)定义为：确保某一个类只有一个实例，而且自动实例化并向整个系统提供整个实例。

Ensure a class has only instance, and provide a global point of access to it.


单例模式关注点：
    1）构造函数需要是 private 访问权限的，这样才能避免外部通过 new 创建实例；
    2）考虑对象创建时的线程安全问题；
    3）考虑是否支持延迟加载；
    4）考虑 getInstance() 性能是否高（是否加锁）。


单例模式总结
 单例模式作为一种目标明确、结构简单、理解容易的设计模式，在软件开发中使用频率相当高，在很多应用软件和框架中都得以广泛应用。

TODO 单例模式创建的对象是进程唯一的。
    “线程唯一”指的是：线程内唯一，线程间不唯一。
    “进程唯一”指的是：进程内唯一（即线程内、线程间都唯一），进程间不唯一。
    “集群唯一”指的是：进程内唯一，进程间也唯一。

1.主要优点

 单例模式的主要优点如下：

 (1) 单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。

 (2) 由于在系统内存中只存在一个对象，因此可以节约系统资源，减少内存开支，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。

 (3) 允许可变数目的实例(多例模式)。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题。



2.主要缺点

 单例模式的主要缺点如下：

 (1) 由于单例模式中没有抽象层，因此单例类的扩展有很大的困难。

 (2) 单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。

 (3) 现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致共享的单例对象状态的丢失。



3.适用场景

 在以下情况下可以考虑使用单例模式：

 (1) 系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗太大而只允许创建一个对象。

 (2) 客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。

 (3) 创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源。


1. 单例存在哪些问题？
    1）单例对 OOP 特性的支持不友好
    2）单例会隐藏类之间的依赖关系
    3）单例对代码的扩展性不友好
    4）单例对代码的可测试性不友好
    5）单例不支持有参数的构造函数

2. 单例有什么替代解决方案？为了保证全局唯一，除了使用单例，我们还可以用静态方法来实现。
   不过，静态方法这种实现思路，并不能解决我们之前提到的问题。如果要完全解决这些问题，我们可能要从根上，寻找其他方式来实现全局唯一类了。
   比如，通过工厂模式、IOC 容器（比如 Spring IOC 容器）来保证，由程序员自己来保证（自己在编写代码的时候自己保证不要创建两个类对象）。


3. 多例模式创建的对象都是同一个类的对象，而工厂模式创建的是不同子类的对象。


