依赖倒置原则(Dependence Inversion Principle,DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。

DIP: High level modules should not depend upon low level modules. Both should depend upon abstractions.（高层模块不应该依赖于底层模块，两者都应依赖于其抽象）
     Abstractions should not depend upon details.（抽象不应该依赖于细节）
     Details should depend upon abstractions.（细节应该伊利抽象）


依赖倒转原则要求：在代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等，而不要用具体类来做这些事情。
               为了确保该原则的应用，一个具体类应当只实现接口或抽象类中声明过的方法，而不要给出多余的方法，否则将无法调用到在子类中增加的新方法。

在实现依赖倒转原则时，我们需要针对抽象层编程，而将具体类的对象通过依赖注入(DependencyInjection, DI)的方式注入到其他对象中，依赖注入是指当一个对象要与其他对象发生依赖关系时，通过抽象来注入所依赖的对象。

常用的注入方式有三种：构造注入，设值注入（Setter注入）和接口注入。 这些方法在定义时使用的是抽象类型，在运行时再传入具体类型的对象，由子类对象来覆盖父类对象。
    1）构造注入是指 通过构造函数来传入具体类的对象，
    2）设值注入是指 通过Setter方法来传入具体类的对象，
    3）接口注入是指 通过在接口中声明的业务方法来传入具体类的对象。


TODO 【开闭原则是目标，里氏代换原则是基础，依赖倒转原则是手段； 面向接口编程！！！】



