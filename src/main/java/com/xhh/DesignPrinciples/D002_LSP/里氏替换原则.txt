里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。

Liskov Substitution Principle： Functions that use pointers of references to base classes must be able to use objets of derived classes without knowing it;


在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。

里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。


注意：
  (1) 【子类必须完全实现父类的方法】 子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法。
        根据里氏代换原则，为了保证系统的扩展性，在程序中通常使用父类来进行定义，如果一个方法只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。

  (2) 【子类出现的地方，父类未必可以胜任】
        运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例。
        可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。

  (3) 【覆盖或实现父类的方法时，输入参数可以被放大】
        子类中方法的前置条件必须与父类中被复写的方法的前置条件相同或者更宽松，即子类的前置条件可以相同或者较大与父类。

  (4) 【覆盖或实现父类的方法时，输出结果可以被缩小】
        父类的一个方法的返回值是一个类型T，子类相同的方法（重载或者复写）的返回值为S, 那么要求 S必须小于等于T。

